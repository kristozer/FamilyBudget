{"version":3,"sources":["components/NavBar/index.js","components/PeriodsList/components/IncomeSettings/index.js","hoc/withDrawer/index.js","components/PeriodsList/components/ExpenditureSettings/index.js","components/PeriodsList/components/Expenditures/index.js","components/PeriodsList/components/Period/index.js","components/PeriodsList/index.js","services/apiService.js","services/periodsService.js","services/incomesService.js","services/expendituresService.js","stores/PeriodsStore.js","components/AddPeriod/index.js","App.js","index.js"],"names":["NavBar","AppBar","position","Toolbar","inject","observer","store","periodId","incomes","useState","newIncomeName","setNewIncomeName","newIncomeValue","setNewIncomeValue","List","map","income","ListItem","button","ListItemText","primary","name","value","ListItemIcon","onClick","deletePeriodIncome","id","Stack","spacing","alignItems","TextField","label","variant","onChange","e","target","parseInt","Button","addPeriodIncome","styles","margin","marginTop","withDrawer","Component","onClose","isVisible","Drawer","anchor","open","event","type","key","Box","style","sx","width","role","ExpenditureSettings","expenditure","onDelete","newName","setNewName","plannedToSpendValue","newPlannedToSpendValue","setPlannedToSpendValue","spentValue","newSpentValue","setSpentValue","disabled","boldMarginText","fontWeight","marginRight","marginText","data","isVisibleExpenditureSettings","setIsVisibleExpenditureSettings","actualExpenditure","setActualExpenditure","openExpenditureSettings","closeExpenditureSettings","index","listNumber","Typography","display","fontSize","IconButton","color","size","component","Edit","reduce","prev","next","changeExpenditure","deleteExpenditure","paper","padding","whiteSpace","periodBegin","periodEnd","expenditures","isVisibleIncomeSettings","setIsVisibleIncomeSettings","formatDate","str","date","Date","getDate","toString","padStart","getMonth","getFullYear","accumulator","currentValue","toggleIncomesVisibility","Paper","elevation","deletePeriod","right","top","DeleteForever","periods","itemSize","length","items","d","Grid","item","xs","sm","showPeriods","container","CircularProgress","get","url","fetch","then","_parseJson","post","fetchParams","method","headers","body","JSON","stringify","response","contentType","includes","_isJson","json","Promise","resolve","savePeriod","period","a","saveIncome","getIncomes","saveExpenditure","getExpenditures","PeriodsStore","fillPeriods","runInAction","changePeriod","incomeId","find","i","newIncomes","newExpenditures","makeObservable","this","observable","action","AddPeriod","onAdd","dt","toISOString","slice","periodBeg","setPeriodBeg","setPeriodEnd","InputLabelProps","shrink","required","App","props","closePeriodAdd","setState","isAddPeriodVisible","periodsStore","state","edge","bottom","AddCircle","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.44922528.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar } from '@mui/material';\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <AppBar position='static'>\r\n            <Toolbar>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { Button, Stack, TextField } from '@mui/material';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\n\r\nconst IncomeSettings = ({ store, periodId, incomes }) => {\r\n    const [newIncomeName, setNewIncomeName] = useState('');\r\n    const [newIncomeValue, setNewIncomeValue] = useState('');\r\n\r\n    const list = () => (\r\n        <List>\r\n            {incomes.map(income => (\r\n                <ListItem button key={income.id}>\r\n                    <ListItemText primary={income.name}/>\r\n                    <ListItemText primary={income.value}/>\r\n                    <ListItemIcon onClick={() => store.deletePeriodIncome(periodId, income.id)}>\r\n                        <DeleteForeverIcon/>\r\n                    </ListItemIcon>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n\r\n    const addPeriodIncomeFunc = () => {\r\n        store.addPeriodIncome({ periodId, name: newIncomeName, value: newIncomeValue || 0 });\r\n        setNewIncomeName('');\r\n        setNewIncomeValue('');\r\n    };\r\n\r\n    const onNewIncomeNameChange = e => setNewIncomeName(e.target.value);\r\n    const onNewIncomeValueChange = e => setNewIncomeValue(parseInt(e.target.value));\r\n\r\n    return (\r\n        <>\r\n            {list()}\r\n            <Stack spacing={1} alignItems=\"center\">\r\n                <TextField label='Наименование' variant=\"standard\" value={newIncomeName}\r\n                           onChange={onNewIncomeNameChange}/>\r\n                <TextField label='Сумма' variant=\"standard\" value={newIncomeValue} onChange={onNewIncomeValueChange}/>\r\n                <Button variant=\"contained\" onClick={addPeriodIncomeFunc}>Добавить</Button>\r\n            </Stack>\r\n        </>);\r\n};\r\n\r\nIncomeSettings.propTypes = {\r\n    store: PropTypes.object,\r\n    periodId: PropTypes.number\r\n};\r\n\r\nexport default inject(`store`)(observer(IncomeSettings));\r\n","import React from 'react';\r\nimport { Box, Drawer } from '@mui/material';\r\n\r\nconst styles = {\r\n    margin: {\r\n        marginTop: '5px'\r\n    }\r\n};\r\n\r\nexport default function withDrawer(Component, onClose, isVisible) {\r\n    const toggleDrawer = (open) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            anchor='left'\r\n            open={isVisible}\r\n            onClose={toggleDrawer(false)}\r\n        >\r\n            <Box\r\n                style={styles.margin}\r\n                sx={{ width: 250 }}\r\n                role=\"presentation\"\r\n            >\r\n                {Component}\r\n            </Box>\r\n        </Drawer>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button, Stack, TextField } from '@mui/material';\r\n\r\nconst ExpenditureSettings = ({ expenditure, onChange, onDelete }) => {\r\n    const [newName, setNewName] = useState(expenditure.name || '');\r\n    const [newPlannedToSpendValue, setPlannedToSpendValue] = useState(expenditure.plannedToSpendValue || '');\r\n    const [newSpentValue, setSpentValue] = useState(expenditure.spentValue || '');\r\n\r\n    const onNewName = e => setNewName(e.target.value);\r\n    const onNewPlannedToSpendValue = e => setPlannedToSpendValue(parseInt(e.target.value));\r\n    const onNewSpentValue = e => setSpentValue(parseInt(e.target.value));\r\n    const onChangeLocal = () => {\r\n        onChange({\r\n            id: expenditure.id,\r\n            name: newName,\r\n            plannedToSpendValue: newPlannedToSpendValue || 0,\r\n            spentValue: newSpentValue || 0\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={1} alignItems=\"center\">\r\n            <TextField label='Наименование' variant=\"standard\" value={newName} onChange={onNewName}/>\r\n            <TextField label='Запланировано' variant=\"standard\" value={newPlannedToSpendValue} onChange={onNewPlannedToSpendValue}/>\r\n            <TextField label='Потрачено' variant=\"standard\" value={newSpentValue} onChange={onNewSpentValue}/>\r\n            <Button variant=\"contained\" onClick={onChangeLocal}>{expenditure.id === 0 ? `Добавить` : `Изменить`}</Button>\r\n            <Button variant=\"contained\" onClick={() => onDelete(expenditure.id)} disabled={expenditure.id === 0}>Удалить</Button>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default ExpenditureSettings;\r\n","import React, { useState } from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { Box, Button, IconButton, Stack, Typography } from '@mui/material';\r\nimport { Edit as EditIcon } from '@mui/icons-material';\r\nimport withDrawer from '../../../../hoc/withDrawer';\r\nimport ExpenditureSettings from '../ExpenditureSettings';\r\n\r\nconst styles = {\r\n    boldMarginText: {\r\n        fontWeight: 'bold',\r\n        marginRight: '5px'\r\n    },\r\n    marginText: {\r\n        marginRight: '5px'\r\n    }\r\n};\r\n\r\nconst Expenditures = ({ store, periodId, data }) => {\r\n    const [isVisibleExpenditureSettings, setIsVisibleExpenditureSettings] = useState(false);\r\n    const [actualExpenditure, setActualExpenditure] = useState({});\r\n\r\n    const openExpenditureSettings = expenditure => {\r\n        setActualExpenditure(expenditure);\r\n        setIsVisibleExpenditureSettings(true);\r\n    };\r\n\r\n    const closeExpenditureSettings = () => {\r\n        setIsVisibleExpenditureSettings(false);\r\n    };\r\n\r\n    const onExpenditureChange = (expenditure) => {\r\n        store.changeExpenditure({ ...expenditure, periodId });\r\n        closeExpenditureSettings();\r\n    };\r\n\r\n    const onExpenditureDelete = id => {\r\n        store.deleteExpenditure(periodId, id);\r\n        closeExpenditureSettings();\r\n    };\r\n\r\n    if (!data) {\r\n        return <div/>;\r\n    }\r\n\r\n    const createItems = () => {\r\n        return data.map((expenditure, index) => {\r\n            const listNumber = index + 1;\r\n\r\n            return (\r\n                <div key={expenditure.id}>\r\n                    <Typography variant='subtitle1'\r\n                                display='inline'>{`${listNumber}. ${expenditure.name}`}</Typography>\r\n                    <Box>\r\n                        <Typography variant='subtitle1' display='inline'\r\n                                    fontSize='small' style={styles.marginText}>Запланировано:\r\n                        </Typography>\r\n                        <Typography\r\n                            variant='subtitle1' display='inline' fontSize='small'\r\n                            style={styles.boldMarginText}>{expenditure.plannedToSpendValue}</Typography>\r\n\r\n                        <Typography\r\n                            variant='subtitle1' display='inline' fontSize='small' style={styles.marginText}\r\n                            >Потрачено:\r\n                        </Typography>\r\n                        <Typography variant='subtitle1' display='inline'\r\n                                    fontSize='small'\r\n                                    style={styles.boldMarginText}>{expenditure.spentValue}</Typography>\r\n\r\n                        <IconButton aria-label=\"edit\" color=\"primary\" size=\"small\" component=\"span\"\r\n                        onClick={() => openExpenditureSettings(expenditure)}>\r\n                            <EditIcon fontSize=\"small\"/>\r\n                        </IconButton>\r\n                    </Box>\r\n                </div>);\r\n        });\r\n    };\r\n\r\n    const spentSum = () => {\r\n        return data.reduce((prev, next) => prev + next.spentValue, 0);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Stack spacing={0.5}>\r\n                {createItems()}\r\n                <Typography variant='subtitle1' display='inline'>Общий расход: {spentSum()}</Typography>\r\n                <Button variant=\"contained\" onClick={() => openExpenditureSettings({ id:0 })}>Добавить расход</Button>\r\n            </Stack>\r\n            {withDrawer(<ExpenditureSettings expenditure={actualExpenditure} onChange={onExpenditureChange}\r\n                                             onDelete={onExpenditureDelete}/>,\r\n                closeExpenditureSettings, isVisibleExpenditureSettings)}\r\n        </>);\r\n};\r\n\r\nexport default inject(`store`)(observer(Expenditures));\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { Paper, Typography, IconButton, Box } from '@mui/material';\r\nimport { Edit as EditIcon, DeleteForever as DeleteForeverIcon } from '@mui/icons-material';\r\nimport IncomeSettings from '../IncomeSettings';\r\nimport Expenditures from '../Expenditures';\r\nimport withDrawer from '../../../../hoc/withDrawer';\r\n\r\nconst styles = {\r\n    paper: {\r\n        margin: '12px 5px',\r\n        padding: '5px',\r\n        display: 'inline-block',\r\n        whiteSpace: 'nowrap',\r\n        position: 'relative'\r\n    }\r\n};\r\n\r\nconst Period = ({ data: { id, periodBegin, periodEnd, incomes, expenditures }, store }) => {\r\n    const [isVisibleIncomeSettings, setIsVisibleIncomeSettings] = useState(false);\r\n\r\n    const formatDate = (str) => {\r\n        const date = new Date(str);\r\n        return date.getDate().toString().padStart(2, '0') + '.' + (date.getMonth() + 1).toString().padStart(2, '0') + '.' + date.getFullYear();\r\n    };\r\n\r\n    const income = incomes.reduce((accumulator, currentValue) => accumulator + currentValue.value, 0);\r\n    const toggleIncomesVisibility = () => {\r\n        setIsVisibleIncomeSettings(!isVisibleIncomeSettings)\r\n    };\r\n\r\n    const deletePeriod = () => store.deletePeriod(id);\r\n\r\n    return (\r\n        <>\r\n            <Paper style={styles.paper} elevation={3}>\r\n                <IconButton aria-label=\"edit\" color=\"primary\" size=\"small\" component=\"span\"\r\n                            onClick={deletePeriod} style={{ position: 'absolute', right: '-10px', top: '0' }}>\r\n                    <DeleteForeverIcon fontSize=\"small\"/>\r\n                </IconButton>\r\n                <Box>\r\n                    <Typography variant='subtitle1' display='inline'>Период: {formatDate(periodBegin)}</Typography>\r\n                    <Typography variant='subtitle1' display='inline'> - </Typography>\r\n                    <Typography variant='subtitle1' display='inline'>{formatDate(periodEnd)}</Typography>\r\n                </Box>\r\n                <Box>\r\n                    <Typography variant='subtitle1' display='inline'>Доход: {income}</Typography>\r\n                    <IconButton aria-label=\"edit\" color=\"primary\" size=\"small\" component=\"span\"\r\n                                onClick={toggleIncomesVisibility}>\r\n                        <EditIcon fontSize=\"small\"/>\r\n                    </IconButton>\r\n                </Box>\r\n                <Expenditures periodId={id} data={expenditures}/>\r\n            </Paper>\r\n            {withDrawer(<IncomeSettings\r\n                periodId={id}\r\n                incomes={incomes}\r\n            />, toggleIncomesVisibility, isVisibleIncomeSettings)}\r\n        </>\r\n    );\r\n};\r\n\r\nPeriod.propTypes = {\r\n    periodBegin: PropTypes.instanceOf(Date),\r\n    periodEnd: PropTypes.instanceOf(Date),\r\n    incomes: PropTypes.array,\r\n    expenditures: PropTypes.array\r\n};\r\n\r\nexport default inject(`store`)(observer(Period));\r\n","import React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { CircularProgress, Grid } from '@mui/material';\r\nimport Period from './components/Period';\r\n\r\nconst PeriodsList = ({ store }) => {\r\n    const data = store.periods;\r\n    const itemSize = 12 / data.length;\r\n\r\n    const items = data.map(d => {\r\n        return (\r\n            <Grid key={d.id} item xs={12} sm={itemSize}>\r\n                <Period data={d}/>\r\n            </Grid>\r\n        );\r\n    });\r\n\r\n    if (!store.showPeriods) {\r\n        return <CircularProgress/>;\r\n    }\r\n\r\n    return (\r\n        <Grid container>\r\n            {items}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default inject(`store`)(observer(PeriodsList));\r\n","export function get(url) {\r\n    return fetch(url).then(_parseJson);\r\n}\r\n\r\nexport function post(url, data) {\r\n    const fetchParams = {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    };\r\n    return fetch(url, fetchParams).then(_parseJson);\r\n}\r\n\r\nfunction _isJson(response) {\r\n    const contentType = response?.headers?.get(`Content-Type`) || ``;\r\n\r\n    return contentType.includes(`application/json`) || contentType.includes(`application/x-javascript`);\r\n}\r\n\r\nfunction _parseJson(response) {\r\n    if (_isJson(response)) {\r\n\r\n        return response.json();\r\n    }\r\n\r\n    return Promise.resolve();\r\n}\r\n","import { get, post } from './apiService';\r\n\r\nexport function getPeriods() {\r\n    return get('budgetperiods');\r\n}\r\n\r\nexport async function savePeriod(period) {\r\n    return post(`BudgetPeriods/SavePeriod`, period);\r\n}\r\n\r\nexport function deletePeriod(id) {\r\n    return post(`BudgetPeriods/DeletePeriod?id=${id}`);\r\n}\r\n","import { get, post } from './apiService';\r\n\r\nexport async function saveIncome(income) {\r\n    return post(`Incomes/SaveIncome`, income);\r\n}\r\n\r\nexport function getIncomes(periodId) {\r\n    return get(`Incomes/Get?periodId=${periodId}`);\r\n}\r\n\r\nexport function deleteIncome(id) {\r\n    return post(`Incomes/DeleteIncome?id=${id}`);\r\n}\r\n","import { get, post } from './apiService';\r\n\r\nexport async function saveExpenditure(expenditure) {\r\n    return post(`Expenditures/SaveExpenditure`, expenditure);\r\n}\r\n\r\nexport function getExpenditures(periodId) {\r\n    return get(`Expenditures/Get?periodId=${periodId}`);\r\n}\r\n\r\nexport function deleteExpenditure(id) {\r\n    return post(`Expenditures/DeleteExpenditure?id=${id}`);\r\n}\r\n","import { makeObservable, observable, action, runInAction } from 'mobx';\r\n\r\nimport { getPeriods, savePeriod, deletePeriod } from '../services/periodsService';\r\nimport { getIncomes, saveIncome, deleteIncome } from '../services/incomesService';\r\nimport { getExpenditures, saveExpenditure, deleteExpenditure } from '../services/expendituresService';\r\n\r\n\r\nclass PeriodsStore {\r\n    periods = [];\r\n    showPeriods = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            periods: observable,\r\n            showPeriods: observable,\r\n            fillPeriods: action,\r\n            changePeriod: action,\r\n            deletePeriodIncome: action,\r\n            addPeriodIncome: action,\r\n            changeExpenditure: action,\r\n            deleteExpenditure: action\r\n        });\r\n    }\r\n\r\n    fillPeriods = async () => {\r\n        const periods = await getPeriods();\r\n\r\n        runInAction(() => {\r\n            this.periods = periods;\r\n            this.showPeriods = true;\r\n        })\r\n    };\r\n\r\n    changePeriod = async period => {\r\n        await savePeriod(period)\r\n        await this.fillPeriods();\r\n    };\r\n\r\n    deletePeriod = async id => {\r\n        await deletePeriod(id);\r\n        await this.fillPeriods();\r\n    };\r\n\r\n    deletePeriodIncome = async (periodId, incomeId) => {\r\n        const period = this.periods.find(i => i.id === periodId);\r\n        if (period) {\r\n            await deleteIncome(incomeId);\r\n            const newIncomes = await getIncomes(periodId);\r\n\r\n            runInAction(() => {\r\n                period.incomes = newIncomes;\r\n            })\r\n        }\r\n    };\r\n\r\n    addPeriodIncome = async income => {\r\n        const period = this.periods.find(i => i.id === income.periodId);\r\n        if (period) {\r\n            await saveIncome(income);\r\n            const newIncomes = await getIncomes(income.periodId);\r\n\r\n            runInAction(() => {\r\n                period.incomes = newIncomes;\r\n            })\r\n        }\r\n    };\r\n\r\n    changeExpenditure = async expenditure => {\r\n        const period = this.periods.find(i => i.id === expenditure.periodId);\r\n        if (period) {\r\n            await saveExpenditure(expenditure);\r\n            const newExpenditures = await getExpenditures(period.id);\r\n\r\n            runInAction(() => {\r\n                period.expenditures = newExpenditures;\r\n            })\r\n        }\r\n    };\r\n\r\n    deleteExpenditure = async (periodId, id) => {\r\n        const period = this.periods.find(i => i.id === periodId);\r\n        if (period) {\r\n            await deleteExpenditure(id);\r\n            const newExpenditures = await getExpenditures(periodId);\r\n\r\n            runInAction(() => {\r\n                period.expenditures = newExpenditures;\r\n            })\r\n        }\r\n    };\r\n}\r\n\r\nexport default PeriodsStore;\r\n","import React, { useState } from 'react';\r\nimport { Button, Stack, TextField } from '@mui/material';\r\n\r\nconst AddPeriod = ({ store, onAdd }) => {\r\n    const dt = new Date().toISOString().slice(0,10);\r\n    const [periodBeg, setPeriodBeg] = useState(dt);\r\n    const [periodEnd, setPeriodEnd] = useState(dt);\r\n\r\n    const onChangePeriodBeg = e => setPeriodBeg(e.target.value);\r\n    const onChangePeriodEnd = e => setPeriodEnd(e.target.value);\r\n\r\n    const onAddLocal = () => {\r\n        store.changePeriod({\r\n            id: 0,\r\n            periodBegin: new Date(periodBeg),\r\n            periodEnd: new Date(periodEnd),\r\n            incomes: [],\r\n            expenditures: []\r\n        });\r\n        onAdd();\r\n    }\r\n\r\n    return (\r\n        <Stack spacing={1} alignItems=\"center\">\r\n            <TextField label='Дата начала' variant=\"standard\" type=\"date\" value={periodBeg} InputLabelProps={{\r\n                shrink: true, required: true\r\n            }} onChange={onChangePeriodBeg}/>\r\n            <TextField label='Дата окончания' variant=\"standard\" type=\"date\" value={periodEnd} InputLabelProps={{\r\n                shrink: true, required: true\r\n            }} onChange={onChangePeriodEnd}/>\r\n            <Button variant=\"contained\" onClick={onAddLocal}>Добавить период</Button>\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default AddPeriod;\r\n","import React, { Component } from 'react';\r\nimport { Provider } from 'mobx-react';\r\n\r\nimport { IconButton } from '@mui/material';\r\nimport { AddCircle as AddCircleIcon } from '@mui/icons-material';\r\n\r\nimport NavBar from './components/NavBar';\r\nimport PeriodsList from './components/PeriodsList';\r\nimport PeriodsStore from './stores/PeriodsStore';\r\nimport withDrawer from './hoc/withDrawer';\r\nimport AddPeriod from './components/AddPeriod';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.periodsStore = new PeriodsStore();\r\n        this.state = {\r\n            isAddPeriodVisible: false\r\n        };\r\n    }\r\n\r\n    closePeriodAdd = () => this.setState({isAddPeriodVisible: false});\r\n\r\n    async componentDidMount() {\r\n        await this.periodsStore.fillPeriods();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Provider store={this.periodsStore}>\r\n                <div>\r\n                    <NavBar/>\r\n                    <PeriodsList/>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"primary\"\r\n                        aria-label=\"addCircle\"\r\n                        style={{ position: 'absolute', right: '0', bottom: '0' }}\r\n                        onClick={() => this.setState({isAddPeriodVisible: true})}\r\n                    >\r\n                        <AddCircleIcon />\r\n                    </IconButton>\r\n                    {withDrawer(<AddPeriod store={this.periodsStore} onAdd={this.closePeriodAdd}/>, this.closePeriodAdd, this.state.isAddPeriodVisible)}\r\n                </div>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles.css';\r\n\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}